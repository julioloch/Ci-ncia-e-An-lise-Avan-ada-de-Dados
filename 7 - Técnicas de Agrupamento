{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPy+CSV1TfMo82PVWGGQ/c8"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#Agrupamento de clusters"],"metadata":{"id":"ypFmw8iVZFF-"}},{"cell_type":"code","execution_count":29,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":528},"id":"eCEERz6fT8Hd","executionInfo":{"status":"ok","timestamp":1714855719729,"user_tz":180,"elapsed":394,"user":{"displayName":"Julio Loch","userId":"05380949760381862835"}},"outputId":"204b8eec-005a-4348-9594-6702f1fc9adc"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["from sklearn.cluster import KMeans\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import random\n","\n","x, y = [],[]\n","\n","for i in range(9):\n","  x.append(random.randint(1,100))\n","  y.append(random.randint(1,100))\n","\n","dados = list(zip(x, y))\n","\n","clusters = 4\n","kmeans = KMeans(n_clusters=clusters, random_state=0)\n","kmeans.fit(dados)\n","\n","plt.xlabel('x')\n","plt.ylabel('y')\n","plt.title(f'KMeans com {clusters} Clusters')\n","plt.scatter(x, y, c=kmeans.labels_)\n","plt.show()\n"]},{"cell_type":"markdown","source":["#Distância Euclidiana"],"metadata":{"id":"omkMn9erZO2u"}},{"cell_type":"markdown","source":["A distância euclidiana entre dois pontos em um espaço tridimensional é dada pela fórmula:\n","\n","$$ d(x, y) = \\sqrt{\\sum_{i=1}^{n} (x_i - y_i)^2} $$\n","\n","Estes são os dados:\n","x = [3,2,0] e y = [6,2,4]\n","\n","Como são 3 pontos, ficaria assim:\n","\n","$$ d(x, y) = \\sqrt{(x_1 - y_1)^2 + (x_2 - y_2)^2 + (x_3 - y_3)^2} $$\n","\n","Este é um exemplo de código sem numpy:\n","\n"],"metadata":{"id":"P85sLAUKZWUy"}},{"cell_type":"code","source":["import math\n","\n","# Definindo os pontos x e y\n","x = [3, 2, 0]\n","y = [6, 2, 4]\n","\n","# Calculando a distância euclidiana\n","distancia = math.sqrt((x[0] - y[0])**2 + (x[1] - y[1])**2 + (x[2] - y[2])**2)\n","\n","# Imprimindo a distância\n","print(\"A distância euclidiana entre x e y é:\", distancia)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mJ9r2dHBYkQk","executionInfo":{"status":"ok","timestamp":1714856031135,"user_tz":180,"elapsed":355,"user":{"displayName":"Julio Loch","userId":"05380949760381862835"}},"outputId":"329f07db-245d-4624-d79e-25d9127347ff"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["A distância euclidiana entre x e y é: 5.0\n"]}]},{"cell_type":"markdown","source":["Exemplo usando numpy:"],"metadata":{"id":"5X1j_usUagfn"}},{"cell_type":"code","source":["import numpy as np\n","\n","# Definindo os pontos x e y\n","x = np.array([3, 2, 0])\n","y = np.array([6, 2, 4])\n","\n","# Calculando a distância euclidiana\n","distancia = np.linalg.norm(x - y)\n","\n","# Imprimindo a distância\n","print(\"A distância euclidiana entre x e y é:\", distancia)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HJXUFF9VaoPh","executionInfo":{"status":"ok","timestamp":1714856592571,"user_tz":180,"elapsed":6,"user":{"displayName":"Julio Loch","userId":"05380949760381862835"}},"outputId":"794f8adb-0b30-41e0-d232-b2ea94ef53f0"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["A distância euclidiana entre x e y é: 5.0\n"]}]},{"cell_type":"markdown","source":["#Distância de Manhattan\n","A distância de Manhattan, também conhecida como distância de cidade ou distância $$( L_1 )$$ entre dois pontos $$(x_1, y_1)\\ e\\ (x_2, y_2)$$ em um plano bidimensional é calculada pela seguinte fórmula:\n","\n","$$ d(x, y) = \\sum_{i=1}^{n} |x_i - y_i| $$\n","\n","onde $$( |x_i - y_i| )$$ é a diferença absoluta entre as coordenadas $$( x_i )\\  e\\ ( y_i )$$ ao longo da $$(i)-ésima\\  dimensão.$$\n","\n","Por exemplo, considere dois pontos \\( x = (3, 2) \\) e \\( y = (6, 4) \\). A distância de Manhattan entre esses dois pontos é:\n","\n","$$ d(x, y) = |3 - 6| + |2 - 4| = 3 + 2 = 5 $$\n","\n","Portanto, a distância de Manhattan entre \\( x \\) e \\( y \\) é 5 unidades.\n","\n","\n","Exemplo de código sem numpy:"],"metadata":{"id":"L2ja9VRjbb4K"}},{"cell_type":"code","source":["# Definindo os pontos x e y\n","x = [3, 2, 0]\n","y = [6, 2, 4]\n","\n","# Calculando a distância de Manhattan\n","distancia_manhattan = sum(abs(a - b) for a, b in zip(x, y))\n","\n","# Imprimindo a distância de Manhattan\n","print(\"A distância de Manhattan entre x e y é:\", distancia_manhattan)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"St2ml77dbfZA","executionInfo":{"status":"ok","timestamp":1714857702374,"user_tz":180,"elapsed":290,"user":{"displayName":"Julio Loch","userId":"05380949760381862835"}},"outputId":"6edb0047-b730-4ea3-f8a5-a29befe4fbf5"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["A distância de Manhattan entre x e y é: 7\n"]}]},{"cell_type":"markdown","source":["Código com numpy:"],"metadata":{"id":"cji-lROPeqs3"}},{"cell_type":"code","source":["import numpy as np\n","\n","# Definindo os pontos x e y\n","x = np.array([3, 2, 0])\n","y = np.array([6, 2, 4])\n","\n","# Calculando a distância de Manhattan\n","distancia_manhattan = np.sum(np.abs(x - y))\n","\n","# Imprimindo a distância de Manhattan\n","print(\"A distância de Manhattan entre x e y (usando NumPy) é:\", distancia_manhattan)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OucCOQKCe4nz","executionInfo":{"status":"ok","timestamp":1714857705586,"user_tz":180,"elapsed":366,"user":{"displayName":"Julio Loch","userId":"05380949760381862835"}},"outputId":"05d14642-0183-4e7a-a3e1-c2bb5046ca6f"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["A distância de Manhattan entre x e y (usando NumPy) é: 7\n"]}]}]}